import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MANAGER_CHAT_ID = os.getenv("MANAGER_CHAT_ID")

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
if not MANAGER_CHAT_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω MANAGER_CHAT_ID")

# --- Health-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
class _HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def _run_health_server():
    port = int(os.getenv("PORT", "8000"))
    server = HTTPServer(("0.0.0.0", port), _HealthHandler)
    server.serve_forever()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ ---
CONSENT, WAIT_VIDEO = range(2)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–°–æ–≥–ª–∞—Å–µ–Ω ‚úÖ", "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω ‚ùå"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. "
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=reply_markup
    )
    return CONSENT

async def consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–°–æ–≥–ª–∞—Å–µ–Ω ‚úÖ":
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∏–¥–µ–æ üé• (–º–æ–∂–Ω–æ –∫–∞–∫ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª)")
        return WAIT_VIDEO
    else:
        await update.message.reply_text("–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π ‚ùå. –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return ConversationHandler.END

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    video = update.message.video
    document = update.message.document

    file_id = None
    if video:
        file_id = video.file_id
    elif document and document.mime_type and document.mime_type.startswith("video/"):
        file_id = document.file_id

    if file_id:
        try:
            await context.bot.send_message(MANAGER_CHAT_ID, f"üì© –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç @{update.effective_user.username or update.effective_user.first_name}")
            await context.bot.send_video(MANAGER_CHAT_ID, file_id)
        except:
            await context.bot.send_document(MANAGER_CHAT_ID, file_id)

        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        return ConversationHandler.END

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ –≤–∏–¥–µ–æ üé•")
    return WAIT_VIDEO

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚ùå")
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Health-—Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=_run_health_server, daemon=True).start()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CONSENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, consent)],
            WAIT_VIDEO: [
                MessageHandler(filters.VIDEO, handle_video),
                MessageHandler(filters.Document.VIDEO, handle_video)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
